[{"/Users/Oliver/WebstormProjects/roborally_frontend-2/src/index.tsx":"1","/Users/Oliver/WebstormProjects/roborally_frontend-2/src/reportWebVitals.ts":"2","/Users/Oliver/WebstormProjects/roborally_frontend-2/src/App.tsx":"3","/Users/Oliver/WebstormProjects/roborally_frontend-2/src/components/GamesComponent.tsx":"4","/Users/Oliver/WebstormProjects/roborally_frontend-2/src/context/GameContextProvider.tsx":"5","/Users/Oliver/WebstormProjects/roborally_frontend-2/src/components/BoardComponent.tsx":"6","/Users/Oliver/WebstormProjects/roborally_frontend-2/src/context/GameContext.ts":"7","/Users/Oliver/WebstormProjects/roborally_frontend-2/src/api/GameApi.ts":"8","/Users/Oliver/WebstormProjects/roborally_frontend-2/src/components/Gamecomponent.tsx":"9","/Users/Oliver/WebstormProjects/roborally_frontend-2/src/components/SpaceComponent.tsx":"10"},{"size":514,"mtime":1623843818846,"results":"11","hashOfConfig":"12"},{"size":425,"mtime":1623843818847,"results":"13","hashOfConfig":"12"},{"size":632,"mtime":1623843818843,"results":"14","hashOfConfig":"12"},{"size":980,"mtime":1623934552986,"results":"15","hashOfConfig":"12"},{"size":10170,"mtime":1623934552987,"results":"16","hashOfConfig":"12"},{"size":1422,"mtime":1623934551991,"results":"17","hashOfConfig":"12"},{"size":1171,"mtime":1623921601971,"results":"18","hashOfConfig":"12"},{"size":1131,"mtime":1623934552985,"results":"19","hashOfConfig":"12"},{"size":673,"mtime":1623843818844,"results":"20","hashOfConfig":"12"},{"size":2309,"mtime":1623843818845,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1vl5izw",{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/Oliver/WebstormProjects/roborally_frontend-2/src/index.tsx",[],"/Users/Oliver/WebstormProjects/roborally_frontend-2/src/reportWebVitals.ts",[],"/Users/Oliver/WebstormProjects/roborally_frontend-2/src/App.tsx",[],"/Users/Oliver/WebstormProjects/roborally_frontend-2/src/components/GamesComponent.tsx",["44","45","46"],"import {FunctionComponent, useContext, useEffect, useState} from \"react\";\nimport GameContext from \"../context/GameContext\";\nimport {GameComponent} from \"./Gamecomponent\";\nimport {Game} from \"../types/Game\";\nimport GameApi from \"../api/GameApi\";\n\n\ntype GameComponentProps = {}\n\nconst GamesComponent: FunctionComponent<GameComponentProps> = () => {\n    const {games, loaded, getGames, createBoard} = useContext(GameContext)\n    useEffect(() => {\n        getGames().then(r => console.log(\"spillet hentet\"))\n    }, [])\n\n        return (\n            !loaded ?\n\n                <div>\n                    <button onClick={() => createBoard()}> Create game </button>\n                    {\n                        games.map((game: Game, index: number) =>\n                            <GameComponent key={\"game\" + index} game={game}/>\n                        )\n                    }\n                </div>\n                :\n                <div/>\n\n        )\n}\n\nexport default GamesComponent\n","/Users/Oliver/WebstormProjects/roborally_frontend-2/src/context/GameContextProvider.tsx",["47","48","49","50","51","52"],"import React, {ReactNode, useCallback, useEffect, useMemo, useState} from \"react\"\nimport GameContext from \"./GameContext\"\nimport {Player} from \"../types/Player\";\nimport {Board} from \"../types/Board\";\nimport {Space} from \"../types/Space\";\nimport GameApi from \"../api/GameApi\";\nimport {Game} from \"../types/Game\";\nimport BoardComponent from \"../components/BoardComponent\";\n\ntype GameContextProviderPropsType = {\n    children: ReactNode\n}\n\n\nconst GameContextProvider = ({children}: GameContextProviderPropsType) => {\n    const [game] = useState<Game[]>([])\n    const [games, setGames] = useState<Game[]>([])\n    const [loaded, setLoaded] = useState<boolean>(false)\n    useEffect(() => {\n        GameApi.getBoard(gameId).then(board => {\n            setSpaces(board.spaceDtos)\n            setPlayers(board.playerDtos)\n            setWidth(board.width)\n            setHeight(board.height)\n            setGameId(board.boardId)\n            setGameName(board.boardName)\n            if (board.currentPlayerDto) {\n                setCurrentPlayer(board.currentPlayerDto)\n                board.playerDtos.forEach((player,index)=>{\n                    if(player.playerId === board.currentPlayerDto?.playerId){\n                        setCurrentPlayerIndex(index)\n                    }\n                })\n\n            }\n            setLoaded(true)\n        }).catch(() => {\n            console.error(\"Error while fetching board from backend\")\n        })\n    }, [])\n    //The code below is executed when the provider is rendered (inside App.tsx)\n    //The code should fetch the data from the API instead of using a static assignment\n    //Define a useState variable, note that useState returns an array, containing that state itself aswell as\n    // a function to set a new state value, here we use array destructuring (the [..., ...] notation).\n    // we also declare that the state variable and setter should be of type /take type Player[]\n\n\n\n    const [players, setPlayers] = useState<Player[]>([])\n    const playerCount = useMemo(() => players.length, [players])\n    const [currentPlayerIndex, setCurrentPlayerIndex] = useState<number>(0)\n    const [currentPlayer, setCurrentPlayer] = useState<Player>({playerId : -1,playerColor:\"red\",boardId : -1,playerName : \"\"})\n    const [spaces, setSpaces] = useState<Space[][]>([])\n    const [width, setWidth] = useState<number>(0)\n    const [height, setHeight] = useState<number>(0)\n    const [gameId, setGameId] = useState<number>(0)\n    const [gameName, setGameName] = useState<string>(\"Hi\")\n\n    //Define a function used to set a player ona  specific space\n    const setPlayerOnSpace = useCallback(async (space: Space) => {\n        //Check if space already has a player standing on it\n        if (!space.playerId) {\n            await GameApi.moveCurrentPlayer(gameId, {...space, playerId: currentPlayer.playerId}).then(() => {\n                let tempSpaces = [...spaces] //Use spread operator to copy spaces array, needed for making immutable changes\n                //See https://bit.ly/2My8Bfz, until the section about Immutable.js\n                tempSpaces[space.x][space.y].playerId = currentPlayer.playerId //Set the player on the new space they clicked on\n\n                if (currentPlayer.x !== undefined && currentPlayer.y !== undefined) { //If the player was standing on a space previously, remove them from that space\n                    tempSpaces[currentPlayer.x][currentPlayer.y].playerId = undefined\n                }\n                setSpaces(tempSpaces)\n                let tempPlayers = [...players]\n                tempPlayers[currentPlayerIndex].x = space.x; //Update the players array to reflect the changes\n                tempPlayers[currentPlayerIndex].y = space.y; //Update the players array to reflect the changes\n                setPlayers(tempPlayers)\n                setCurrentPlayer({...currentPlayer, x: space.x, y: space.y}) //Update current player\n\n            }).catch(() => {\n                console.error(\"Error while moving player\")\n            })\n\n        }\n\n    }, [currentPlayer, currentPlayerIndex, gameId, players, spaces])\n\n    const createBoard = useCallback(async () => {\n        const board : any = {\n            boardName : \"Board2\",\n            height : 8,\n            width : 8,\n            boardId : 0\n        }\n        await GameApi.createBoard(board).then(() => {\n            getGames()\n        }).catch(() => console.error(\"Error creating\"))\n    }, [])\n\n\n    const getGames = useCallback(async () => {\n        await GameApi.getGames().then((value)=>{\n            setGames(value)\n        }).catch(()=>console.error(\"Error while switching player\"))\n\n    }, [currentPlayerIndex, gameId, playerCount, players])\n\n    const switchToNextPlayer = useCallback(async () => {\n        await GameApi.switchPlayer(gameId).then(()=>{\n            const newPlayerIndex = (currentPlayerIndex + 1) % playerCount\n            console.log(\"old player index\", currentPlayerIndex, \"new player index\", newPlayerIndex)\n            setCurrentPlayer(players[newPlayerIndex])\n            setCurrentPlayerIndex(newPlayerIndex)\n        }).catch(()=>console.error(\"Error while switching player\"))\n        \n    }, [currentPlayerIndex, gameId, playerCount, players])\n\n    const board = useMemo<Board>(() => {\n        return ({\n            spaceDtos: spaces,\n            playerDtos: players,\n            currentPlayerDto: currentPlayer,\n            currentPlayerIndex: currentPlayerIndex,\n            width: width,\n            height: height,\n            boardName: gameName,\n            boardId: gameId\n        })\n    }, [currentPlayer, currentPlayerIndex, gameId, gameName, height, players, spaces, width])\n\n    const unselectGame = useCallback(async () => {\n        setGameId(-1);\n        setLoaded(false)\n    }, [])\n\n    const selectPlayerOnSpace = useCallback(async (space : Space) => {\n    if (!space.playerId) {\n    await GameApi.moveCurrentPlayer(gameId, {...space, playerId: currentPlayer.playerId}).then(() => {\n        let tempSpaces = [...spaces]\n        tempSpaces[space.x][space.y].playerId = currentPlayer.playerId\n        if (currentPlayer.x !== undefined && currentPlayer.y !== undefined) {\n            tempSpaces[currentPlayer.x][currentPlayer.y].playerId = undefined\n        }\n        setSpaces(tempSpaces)\n        let tempPlayers = [...players]\n        tempPlayers[currentPlayerIndex].x = space.x;\n        tempPlayers[currentPlayerIndex].y = space.y;\n        setPlayers(tempPlayers)\n        setCurrentPlayer({...currentPlayer, x: space.x, y: space.y})\n\n    }).catch((e) => {\n        console.error(\"error\" + e)\n    })\n    }\n    }, [currentPlayer, currentPlayerIndex, gameId, players, spaces])\n\n\n    const selectGame = useCallback(async (game : Game) => {\n        if (!game.started) {\n            GameApi.getBoard(game.id).then(board => {\n                if (board.playerDtos.length > 0) {\n                        setSpaces(board.spaceDtos)\n                        setSpaces(board.spaceDtos)\n                        setPlayers(board.playerDtos)\n                        setWidth(board.width)\n                        setHeight(board.height)\n                        setGameId(board.boardId)\n                        setGameName(board.boardName)\n                        if (board.currentPlayerDto) {\n                            setCurrentPlayer(board.currentPlayerDto)\n                            board.playerDtos.forEach((player, index) => {\n                                if(player.playerId === board.currentPlayerDto?.playerId) {\n                                    setCurrentPlayerIndex(index)\n                                }\n                            })\n                        }\n                setLoaded(true)\n                    }\n            }).catch(() => {\n            console.error(\"Error while fetching board from backend\")\n            })\n        } else {\n                console.error(\"Selected Game '\" + game.id + \"' is not started yet\")\n        }\n    }, [])\n\n    useEffect(() => {\n        const interval = setInterval( async () => {\n            if (loaded && gameId >= 0) {\n                GameApi.getBoard(gameId).then(board => {\n                    if (gameId === board.boardId) {\n                        setSpaces(board.spaceDtos)\n                        setPlayers(board.playerDtos)\n                        setWidth(board.width)\n                        setHeight(board.height)\n                        setGameId(board.boardId)\n                        setGameName(board.boardName)\n                        if (board.currentPlayerDto) {\n                            setCurrentPlayer(board.currentPlayerDto)\n                            board.playerDtos.forEach((player, index) => {\n                                if (player.playerId === board.currentPlayerDto?.playerId) {\n                                    setCurrentPlayerIndex(index)\n                                }\n                            })\n                        } else {\n                            console.error(\"load outdated\")\n                        }\n                    }\n                }).catch(() => {\n                    console.error(\"board could not be loaded\")\n                })\n            } else {\n                GameApi.getGames().then(games => {\n                    setGames(games)\n                }).catch(() => {\n                    console.error(\"games could not be loaded\")\n                });\n            }\n        }, 5000)\n\n            return () => clearInterval(interval)\n    }, [loaded, gameId])\n\n\n    return (\n        <GameContext.Provider\n            value={\n                {\n                    games : games,\n                    loaded : loaded,\n                    selectGame : selectGame,\n                    board : board,\n                    setCurrentPlayerOnSpace: setPlayerOnSpace,\n                    switchCurrentPlayer : switchToNextPlayer,\n                    getGames: getGames,\n                    unselectGame: unselectGame,\n                    createBoard: createBoard,\n                }\n            }>\n            {children} {/*See: https://reactjs.org/docs/composition-vs-inheritance.html*/}\n        </GameContext.Provider>\n    )\n\n\n\n\n}\n\nexport default GameContextProvider","/Users/Oliver/WebstormProjects/roborally_frontend-2/src/components/BoardComponent.tsx",[],"/Users/Oliver/WebstormProjects/roborally_frontend-2/src/context/GameContext.ts",[],"/Users/Oliver/WebstormProjects/roborally_frontend-2/src/api/GameApi.ts",[],"/Users/Oliver/WebstormProjects/roborally_frontend-2/src/components/Gamecomponent.tsx",["53"],"/Users/Oliver/WebstormProjects/roborally_frontend-2/src/components/SpaceComponent.tsx",[],{"ruleId":"54","severity":1,"message":"55","line":1,"column":51,"nodeType":"56","messageId":"57","endLine":1,"endColumn":59},{"ruleId":"54","severity":1,"message":"58","line":5,"column":8,"nodeType":"56","messageId":"57","endLine":5,"endColumn":15},{"ruleId":"59","severity":1,"message":"60","line":14,"column":8,"nodeType":"61","endLine":14,"endColumn":10,"suggestions":"62"},{"ruleId":"54","severity":1,"message":"63","line":8,"column":8,"nodeType":"56","messageId":"57","endLine":8,"endColumn":22},{"ruleId":"54","severity":1,"message":"64","line":16,"column":12,"nodeType":"56","messageId":"57","endLine":16,"endColumn":16},{"ruleId":"59","severity":1,"message":"65","line":40,"column":8,"nodeType":"61","endLine":40,"endColumn":10,"suggestions":"66"},{"ruleId":"59","severity":1,"message":"67","line":96,"column":8,"nodeType":"61","endLine":96,"endColumn":10,"suggestions":"68"},{"ruleId":"59","severity":1,"message":"69","line":104,"column":8,"nodeType":"61","endLine":104,"endColumn":58,"suggestions":"70"},{"ruleId":"54","severity":1,"message":"71","line":134,"column":11,"nodeType":"56","messageId":"57","endLine":134,"endColumn":30},{"ruleId":"54","severity":1,"message":"55","line":1,"column":40,"nodeType":"56","messageId":"57","endLine":1,"endColumn":48},"@typescript-eslint/no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'GameApi' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getGames'. Either include it or remove the dependency array.","ArrayExpression",["72"],"'BoardComponent' is defined but never used.","'game' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'gameId'. Either include it or remove the dependency array.",["73"],"React Hook useCallback has a missing dependency: 'getGames'. Either include it or remove the dependency array.",["74"],"React Hook useCallback has unnecessary dependencies: 'currentPlayerIndex', 'gameId', 'playerCount', and 'players'. Either exclude them or remove the dependency array.",["75"],"'selectPlayerOnSpace' is assigned a value but never used.",{"desc":"76","fix":"77"},{"desc":"78","fix":"79"},{"desc":"76","fix":"80"},{"desc":"81","fix":"82"},"Update the dependencies array to be: [getGames]",{"range":"83","text":"84"},"Update the dependencies array to be: [gameId]",{"range":"85","text":"86"},{"range":"87","text":"84"},"Update the dependencies array to be: []",{"range":"88","text":"89"},[511,513],"[getGames]",[1446,1448],"[gameId]",[4436,4438],[4642,4692],"[]"]