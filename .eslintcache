[{"C:\\Users\\Chenxi\\WebstormProjects\\roborally_frontend-2\\src\\index.tsx":"1","C:\\Users\\Chenxi\\WebstormProjects\\roborally_frontend-2\\src\\reportWebVitals.ts":"2","C:\\Users\\Chenxi\\WebstormProjects\\roborally_frontend-2\\src\\App.tsx":"3","C:\\Users\\Chenxi\\WebstormProjects\\roborally_frontend-2\\src\\context\\GameContextProvider.tsx":"4","C:\\Users\\Chenxi\\WebstormProjects\\roborally_frontend-2\\src\\components\\BoardComponent.tsx":"5","C:\\Users\\Chenxi\\WebstormProjects\\roborally_frontend-2\\src\\components\\GamesComponent.tsx":"6","C:\\Users\\Chenxi\\WebstormProjects\\roborally_frontend-2\\src\\context\\GameContext.ts":"7","C:\\Users\\Chenxi\\WebstormProjects\\roborally_frontend-2\\src\\api\\GameApi.ts":"8","C:\\Users\\Chenxi\\WebstormProjects\\roborally_frontend-2\\src\\components\\SpaceComponent.tsx":"9","C:\\Users\\Chenxi\\WebstormProjects\\roborally_frontend-2\\src\\components\\Gamecomponent.tsx":"10"},{"size":533,"mtime":1623920720416,"results":"11","hashOfConfig":"12"},{"size":440,"mtime":1623920720432,"results":"13","hashOfConfig":"12"},{"size":652,"mtime":1623932325404,"results":"14","hashOfConfig":"12"},{"size":10195,"mtime":1623922654354,"results":"15","hashOfConfig":"12"},{"size":1561,"mtime":1623934009670,"results":"16","hashOfConfig":"12"},{"size":1057,"mtime":1623932195597,"results":"17","hashOfConfig":"12"},{"size":1210,"mtime":1623922654354,"results":"18","hashOfConfig":"12"},{"size":1146,"mtime":1623922654338,"results":"19","hashOfConfig":"12"},{"size":2359,"mtime":1623920720416,"results":"20","hashOfConfig":"12"},{"size":698,"mtime":1623920720416,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1v7gix1",{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"31"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"31"},"C:\\Users\\Chenxi\\WebstormProjects\\roborally_frontend-2\\src\\index.tsx",[],"C:\\Users\\Chenxi\\WebstormProjects\\roborally_frontend-2\\src\\reportWebVitals.ts",[],"C:\\Users\\Chenxi\\WebstormProjects\\roborally_frontend-2\\src\\App.tsx",[],"C:\\Users\\Chenxi\\WebstormProjects\\roborally_frontend-2\\src\\context\\GameContextProvider.tsx",["46","47","48","49"],"import React, {ReactNode, useCallback, useEffect, useMemo, useState} from \"react\"\r\nimport GameContext from \"./GameContext\"\r\nimport {Player} from \"../types/Player\";\r\nimport {Board} from \"../types/Board\";\r\nimport {Space} from \"../types/Space\";\r\nimport GameApi from \"../api/GameApi\";\r\nimport {Game} from \"../types/Game\";\r\n\r\ntype GameContextProviderPropsType = {\r\n    children: ReactNode\r\n}\r\n\r\n\r\nconst GameContextProvider = ({children}: GameContextProviderPropsType) => {\r\n    const [game] = useState<Game[]>([])\r\n    const [games, setGames] = useState<Game[]>([])\r\n    const [loaded, setLoaded] = useState<boolean>(false)\r\n    useEffect(() => {\r\n        GameApi.getBoard(gameId).then(board => {\r\n            setSpaces(board.spaceDtos)\r\n            setPlayers(board.playerDtos)\r\n            setWidth(board.width)\r\n            setHeight(board.height)\r\n            setGameId(board.boardId)\r\n            setGameName(board.boardName)\r\n            if (board.currentPlayerDto) {\r\n                setCurrentPlayer(board.currentPlayerDto)\r\n                board.playerDtos.forEach((player,index)=>{\r\n                    if(player.playerId === board.currentPlayerDto?.playerId){\r\n                        setCurrentPlayerIndex(index)\r\n                    }\r\n                })\r\n\r\n            }\r\n            setLoaded(true)\r\n        }).catch(() => {\r\n            console.error(\"Error while fetching board from backend\")\r\n        })\r\n    }, [])\r\n    //The code below is executed when the provider is rendered (inside App.tsx)\r\n    //The code should fetch the data from the API instead of using a static assignment\r\n    //Define a useState variable, note that useState returns an array, containing that state itself aswell as\r\n    // a function to set a new state value, here we use array destructuring (the [..., ...] notation).\r\n    // we also declare that the state variable and setter should be of type /take type Player[]\r\n    const [players, setPlayers] = useState<Player[]>([])\r\n    const playerCount = useMemo(() => players.length, [players])\r\n    const [currentPlayerIndex, setCurrentPlayerIndex] = useState<number>(0)\r\n    const [currentPlayer, setCurrentPlayer] = useState<Player>({playerId : -1,playerColor:\"red\",boardId : -1,playerName : \"\"})\r\n    const [spaces, setSpaces] = useState<Space[][]>([])\r\n    const [width, setWidth] = useState<number>(0)\r\n    const [height, setHeight] = useState<number>(0)\r\n    const [gameId, setGameId] = useState<number>(0)\r\n    const [gameName, setGameName] = useState<string>(\"hi\")\r\n\r\n    //Define a function used to set a player ona  specific space\r\n    const setPlayerOnSpace = useCallback(async (space: Space) => {\r\n        //Check if space already has a player standing on it\r\n        if (!space.playerId) {\r\n            await GameApi.moveCurrentPlayer(gameId, {...space, playerId: currentPlayer.playerId}).then(() => {\r\n                let tempSpaces = [...spaces] //Use spread operator to copy spaces array, needed for making immutable changes\r\n                //See https://bit.ly/2My8Bfz, until the section about Immutable.js\r\n                tempSpaces[space.x][space.y].playerId = currentPlayer.playerId //Set the player on the new space they clicked on\r\n\r\n                if (currentPlayer.x !== undefined && currentPlayer.y !== undefined) { //If the player was standing on a space previously, remove them from that space\r\n                    tempSpaces[currentPlayer.x][currentPlayer.y].playerId = undefined\r\n                }\r\n                setSpaces(tempSpaces)\r\n                let tempPlayers = [...players]\r\n                tempPlayers[currentPlayerIndex].x = space.x; //Update the players array to reflect the changes\r\n                tempPlayers[currentPlayerIndex].y = space.y; //Update the players array to reflect the changes\r\n                setPlayers(tempPlayers)\r\n                setCurrentPlayer({...currentPlayer, x: space.x, y: space.y}) //Update current player\r\n\r\n            }).catch(() => {\r\n                console.error(\"Error while moving player\")\r\n            })\r\n\r\n        }\r\n\r\n    }, [currentPlayer, currentPlayerIndex, gameId, players, spaces])\r\n\r\n    const createBoard = useCallback(async () => {\r\n        await GameApi.createBoard().then(() => {\r\n            createBoard()\r\n        }).catch(() => console.error(\"Error creating\"))\r\n    }, [])\r\n\r\n\r\n    const getGames = useCallback(async () => {\r\n        await GameApi.getGames().then((value)=>{\r\n            setGames(value)\r\n        }).catch(()=>console.error(\"Error while switching player\"))\r\n\r\n    }, [currentPlayerIndex, gameId, playerCount, players])\r\n\r\n    const switchToNextPlayer = useCallback(async () => {\r\n        await GameApi.switchPlayer(gameId).then(()=>{\r\n            const newPlayerIndex = (currentPlayerIndex + 1) % playerCount\r\n            console.log(\"old player index\", currentPlayerIndex, \"new player index\", newPlayerIndex)\r\n            setCurrentPlayer(players[newPlayerIndex])\r\n            setCurrentPlayerIndex(newPlayerIndex)\r\n        }).catch(()=>console.error(\"Error while switching player\"))\r\n        \r\n    }, [currentPlayerIndex, gameId, playerCount, players])\r\n    const board = useMemo<Board>(() => {\r\n        return ({\r\n            spaceDtos: spaces,\r\n            playerDtos: players,\r\n            currentPlayerDto: currentPlayer,\r\n            currentPlayerIndex: currentPlayerIndex,\r\n            width: width,\r\n            height: height,\r\n            boardName: gameName,\r\n            boardId: gameId\r\n        })\r\n    }, [currentPlayer, currentPlayerIndex, gameId, gameName, height, players, spaces, width])\r\n\r\n    const unselectGame = useCallback(async () => {\r\n        setGameId(-1);\r\n        setLoaded(false)\r\n    }, [])\r\n\r\n    const selectPlayerOnSpace = useCallback(async (space : Space) => {\r\n    if (!space.playerId) {\r\n    await GameApi.moveCurrentPlayer(gameId, {...space, playerId: currentPlayer.playerId}).then(() => {\r\n        let tempSpaces = [...spaces]\r\n        tempSpaces[space.x][space.y].playerId = currentPlayer.playerId\r\n        if (currentPlayer.x !== undefined && currentPlayer.y !== undefined) {\r\n            tempSpaces[currentPlayer.x][currentPlayer.y].playerId = undefined\r\n        }\r\n        setSpaces(tempSpaces)\r\n        let tempPlayers = [...players]\r\n        tempPlayers[currentPlayerIndex].x = space.x;\r\n        tempPlayers[currentPlayerIndex].y = space.y;\r\n        setPlayers(tempPlayers)\r\n        setCurrentPlayer({...currentPlayer, x: space.x, y: space.y})\r\n\r\n    }).catch((e) => {\r\n        console.error(\"error\" + e)\r\n    })\r\n    }\r\n    }, [currentPlayer, currentPlayerIndex, gameId, players, spaces])\r\n\r\n\r\n    const selectGame = useCallback(async (game : Game) => {\r\n        if (!game.started) {\r\n            GameApi.getBoard(game.id).then(board => {\r\n                if (board.playerDtos.length > 0) {\r\n                        setSpaces(board.spaceDtos)\r\n                        setSpaces(board.spaceDtos)\r\n                        setPlayers(board.playerDtos)\r\n                        setWidth(board.width)\r\n                        setHeight(board.height)\r\n                        setGameId(board.boardId)\r\n                        setGameName(board.boardName)\r\n                        if (board.currentPlayerDto) {\r\n                            setCurrentPlayer(board.currentPlayerDto)\r\n                            board.playerDtos.forEach((player, index) => {\r\n                                if(player.playerId === board.currentPlayerDto?.playerId) {\r\n                                    setCurrentPlayerIndex(index)\r\n                                }\r\n                            })\r\n                        }\r\n                setLoaded(true)\r\n                    }\r\n            }).catch(() => {\r\n            console.error(\"Error while fetching board from backend\")\r\n            })\r\n        } else {\r\n                console.error(\"Selected Game '\" + game.id + \"' is not started yet\")\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        const interval = setInterval( async () => {\r\n            if (loaded && gameId >= 0) {\r\n                GameApi.getBoard(gameId).then(board => {\r\n                    if (gameId === board.boardId) {\r\n                        setSpaces(board.spaceDtos)\r\n                        setPlayers(board.playerDtos)\r\n                        setWidth(board.width)\r\n                        setHeight(board.height)\r\n                        setGameId(board.boardId)\r\n                        setGameName(board.boardName)\r\n                        if (board.currentPlayerDto) {\r\n                            setCurrentPlayer(board.currentPlayerDto)\r\n                            board.playerDtos.forEach((player, index) => {\r\n                                if (player.playerId === board.currentPlayerDto?.playerId) {\r\n                                    setCurrentPlayerIndex(index)\r\n                                }\r\n                            })\r\n                        } else {\r\n                            console.error(\"load outdated\")\r\n                        }\r\n                    }\r\n                }).catch(() => {\r\n                    console.error(\"board could not be loaded\")\r\n                })\r\n            } else {\r\n                GameApi.getGames().then(games => {\r\n                    setGames(games)\r\n                }).catch(() => {\r\n                    console.error(\"games could not be loaded\")\r\n                });\r\n            }\r\n        }, 5000)\r\n\r\n            return () => clearInterval(interval)\r\n    }, [loaded, gameId])\r\n\r\n\r\n    return (\r\n        <GameContext.Provider\r\n            value={\r\n                {\r\n                    games : games,\r\n                    loaded : loaded,\r\n                    selectGame : selectGame,\r\n                    board : board,\r\n                    setCurrentPlayerOnSpace: setPlayerOnSpace,\r\n                    switchCurrentPlayer : switchToNextPlayer,\r\n                    getGames: getGames,\r\n                    unselectGame: unselectGame,\r\n                    createBoard: createBoard,\r\n                }\r\n            }>\r\n            {children} {/*See: https://reactjs.org/docs/composition-vs-inheritance.html*/}\r\n        </GameContext.Provider>\r\n    )\r\n\r\n\r\n\r\n\r\n}\r\n\r\nexport default GameContextProvider",["50","51"],"C:\\Users\\Chenxi\\WebstormProjects\\roborally_frontend-2\\src\\components\\BoardComponent.tsx",[],"C:\\Users\\Chenxi\\WebstormProjects\\roborally_frontend-2\\src\\components\\GamesComponent.tsx",["52","53","54","55"],"import {FunctionComponent, useContext, useEffect, useState} from \"react\";\r\nimport GameContext from \"../context/GameContext\";\r\nimport {GameComponent} from \"./Gamecomponent\";\r\nimport {Game} from \"../types/Game\";\r\nimport GameApi from \"../api/GameApi\";\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\ntype GameComponentProps = {}\r\n\r\nconst GamesComponent: FunctionComponent<GameComponentProps> = () => {\r\n    const {games, loaded, getGames, createBoard} = useContext(GameContext)\r\n    useEffect(() => {\r\n        getGames().then(r => console.log(\"spillet hentet\"))\r\n    }, [])\r\n\r\n        return (\r\n            !loaded ?\r\n\r\n                <div>\r\n                    <button> Create game {createBoard}</button>\r\n                    {\r\n                        games.map((game: Game, index: number) =>\r\n                            <GameComponent key={\"game\" + index} game={game}/>\r\n                        )\r\n                    }\r\n                </div>\r\n                :\r\n                <div/>\r\n\r\n        )\r\n}\r\n\r\nexport default GamesComponent\r\n","C:\\Users\\Chenxi\\WebstormProjects\\roborally_frontend-2\\src\\context\\GameContext.ts",[],"C:\\Users\\Chenxi\\WebstormProjects\\roborally_frontend-2\\src\\api\\GameApi.ts",[],"C:\\Users\\Chenxi\\WebstormProjects\\roborally_frontend-2\\src\\components\\SpaceComponent.tsx",[],"C:\\Users\\Chenxi\\WebstormProjects\\roborally_frontend-2\\src\\components\\Gamecomponent.tsx",["56"],"import {FunctionComponent, useContext, useState} from \"react\";\r\nimport GameContext from \"../context/GameContext\";\r\nimport {Game} from \"../types/Game\";\r\n\r\n\r\nexport type GameComponentProps = {\r\n    game : Game\r\n}\r\n\r\nexport const GameComponent: FunctionComponent<GameComponentProps> = ({game}) => {\r\n    const {selectGame} = useContext(GameContext)\r\n\r\n    const onClickGame = async () => {\r\n        selectGame(game)\r\n    }\r\n\r\n    return (\r\n        <div onClick={onClickGame}>\r\n            <h1>{game.id}: {game.name}:</h1>\r\n            <ul>\r\n                {game.players.map((user, index) => <li key={game.name}> {user.playerId} {user.playerName} </li>)}\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n",{"ruleId":"57","severity":1,"message":"58","line":15,"column":12,"nodeType":"59","messageId":"60","endLine":15,"endColumn":16},{"ruleId":"61","severity":1,"message":"62","line":39,"column":8,"nodeType":"63","endLine":39,"endColumn":10,"suggestions":"64"},{"ruleId":"61","severity":1,"message":"65","line":94,"column":8,"nodeType":"63","endLine":94,"endColumn":58,"suggestions":"66"},{"ruleId":"57","severity":1,"message":"67","line":123,"column":11,"nodeType":"59","messageId":"60","endLine":123,"endColumn":30},{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","replacedBy":"71"},{"ruleId":"57","severity":1,"message":"72","line":1,"column":51,"nodeType":"59","messageId":"60","endLine":1,"endColumn":59},{"ruleId":"57","severity":1,"message":"73","line":5,"column":8,"nodeType":"59","messageId":"60","endLine":5,"endColumn":15},{"ruleId":"57","severity":1,"message":"74","line":7,"column":8,"nodeType":"59","messageId":"60","endLine":7,"endColumn":16},{"ruleId":"61","severity":1,"message":"75","line":15,"column":8,"nodeType":"63","endLine":15,"endColumn":10,"suggestions":"76"},{"ruleId":"57","severity":1,"message":"72","line":1,"column":40,"nodeType":"59","messageId":"60","endLine":1,"endColumn":48},"@typescript-eslint/no-unused-vars","'game' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'gameId'. Either include it or remove the dependency array.","ArrayExpression",["77"],"React Hook useCallback has unnecessary dependencies: 'currentPlayerIndex', 'gameId', 'playerCount', and 'players'. Either exclude them or remove the dependency array.",["78"],"'selectPlayerOnSpace' is assigned a value but never used.","no-native-reassign",["79"],"no-negated-in-lhs",["80"],"'useState' is defined but never used.","'GameApi' is defined but never used.","'ReactDOM' is defined but never used.","React Hook useEffect has a missing dependency: 'getGames'. Either include it or remove the dependency array.",["81"],{"desc":"82","fix":"83"},{"desc":"84","fix":"85"},"no-global-assign","no-unsafe-negation",{"desc":"86","fix":"87"},"Update the dependencies array to be: [gameId]",{"range":"88","text":"89"},"Update the dependencies array to be: []",{"range":"90","text":"91"},"Update the dependencies array to be: [getGames]",{"range":"92","text":"93"},[1425,1427],"[gameId]",[4526,4576],"[]",[585,587],"[getGames]"]