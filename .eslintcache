[{"/Users/Oliver/Downloads/roborally_frontend-2/src/index.tsx":"1","/Users/Oliver/Downloads/roborally_frontend-2/src/reportWebVitals.ts":"2","/Users/Oliver/Downloads/roborally_frontend-2/src/App.tsx":"3","/Users/Oliver/Downloads/roborally_frontend-2/src/components/BoardComponent.tsx":"4","/Users/Oliver/Downloads/roborally_frontend-2/src/context/GameContextProvider.tsx":"5","/Users/Oliver/Downloads/roborally_frontend-2/src/context/GameContext.ts":"6","/Users/Oliver/Downloads/roborally_frontend-2/src/api/GameApi.ts":"7","/Users/Oliver/Downloads/roborally_frontend-2/src/components/SpaceComponent.tsx":"8","/Users/Oliver/Downloads/roborally_frontend-2/src/components/GamesComponent.tsx":"9","/Users/Oliver/Downloads/roborally_frontend-2/src/components/Gamecomponent.tsx":"10"},{"size":514,"mtime":1612695170000,"results":"11","hashOfConfig":"12"},{"size":425,"mtime":1612695170000,"results":"13","hashOfConfig":"12"},{"size":632,"mtime":1623420584597,"results":"14","hashOfConfig":"12"},{"size":1355,"mtime":1623433996928,"results":"15","hashOfConfig":"12"},{"size":8225,"mtime":1623433749597,"results":"16","hashOfConfig":"12"},{"size":1099,"mtime":1623433627968,"results":"17","hashOfConfig":"12"},{"size":1023,"mtime":1623421890224,"results":"18","hashOfConfig":"12"},{"size":2309,"mtime":1612695170000,"results":"19","hashOfConfig":"12"},{"size":782,"mtime":1623431746779,"results":"20","hashOfConfig":"12"},{"size":673,"mtime":1623432782498,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"1xwfsfs",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"24"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"24"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"24"},"/Users/Oliver/Downloads/roborally_frontend-2/src/index.tsx",[],["46","47"],"/Users/Oliver/Downloads/roborally_frontend-2/src/reportWebVitals.ts",[],"/Users/Oliver/Downloads/roborally_frontend-2/src/App.tsx",[],"/Users/Oliver/Downloads/roborally_frontend-2/src/components/BoardComponent.tsx",[],"/Users/Oliver/Downloads/roborally_frontend-2/src/context/GameContextProvider.tsx",["48","49","50","51","52"],"import React, {ReactNode, useCallback, useEffect, useMemo, useState} from \"react\"\nimport GameContext from \"./GameContext\"\nimport {Player} from \"../types/Player\";\nimport {Board} from \"../types/Board\";\nimport {Space} from \"../types/Space\";\nimport GameApi from \"../api/GameApi\";\nimport {Game} from \"../types/Game\";\nimport {setInterval} from \"timers\";\n\ntype GameContextProviderPropsType = {\n    children: ReactNode\n}\n\n\nconst GameContextProvider = ({children}: GameContextProviderPropsType) => {\n    const [game] = useState<Game[]>([])\n    const [games, setGames] = useState<Game[]>([])\n    const [loaded, setLoaded] = useState<boolean>(false)\n    useEffect(() => {\n        GameApi.getBoard(gameId).then(board => {\n            setSpaces(board.spaceDtos)\n            setPlayers(board.playerDtos)\n            setWidth(board.width)\n            setHeight(board.height)\n            setGameId(board.boardId)\n            setGameName(board.boardName)\n            if (board.currentPlayerDto) {\n                setCurrentPlayer(board.currentPlayerDto)\n                board.playerDtos.forEach((player,index)=>{\n                    if(player.playerId === board.currentPlayerDto?.playerId){\n                        setCurrentPlayerIndex(index)\n                    }\n                })\n\n            }\n            setLoaded(true)\n        }).catch(() => {\n            console.error(\"Error while fetching board from backend\")\n        })\n    }, [])\n    //The code below is executed when the provider is rendered (inside App.tsx)\n    //The code should fetch the data from the API instead of using a static assignment\n    //Define a useState variable, note that useState returns an array, containing that state itself aswell as\n    // a function to set a new state value, here we use array destructuring (the [..., ...] notation).\n    // we also declare that the state variable and setter should be of type /take type Player[]\n    const [players, setPlayers] = useState<Player[]>([])\n    const playerCount = useMemo(() => players.length, [players])\n    const [currentPlayerIndex, setCurrentPlayerIndex] = useState<number>(0)\n    const [currentPlayer, setCurrentPlayer] = useState<Player>({playerId : -1,playerColor:\"red\",boardId : -1,playerName : \"\"})\n    const [spaces, setSpaces] = useState<Space[][]>([])\n    const [width, setWidth] = useState<number>(0)\n    const [height, setHeight] = useState<number>(0)\n    const [gameId, setGameId] = useState<number>(0)\n    const [gameName, setGameName] = useState<string>(\"hi\")\n\n    //Define a function used to set a player ona  specific space\n    const setPlayerOnSpace = useCallback(async (space: Space) => {\n        //Check if space already has a player standing on it\n        if (!space.playerId) {\n            await GameApi.moveCurrentPlayer(gameId, {...space, playerId: currentPlayer.playerId}).then(() => {\n                let tempSpaces = [...spaces] //Use spread operator to copy spaces array, needed for making immutable changes\n                //See https://bit.ly/2My8Bfz, until the section about Immutable.js\n                tempSpaces[space.x][space.y].playerId = currentPlayer.playerId //Set the player on the new space they clicked on\n\n                if (currentPlayer.x !== undefined && currentPlayer.y !== undefined) { //If the player was standing on a space previously, remove them from that space\n                    tempSpaces[currentPlayer.x][currentPlayer.y].playerId = undefined\n                }\n                setSpaces(tempSpaces)\n                let tempPlayers = [...players]\n                tempPlayers[currentPlayerIndex].x = space.x; //Update the players array to reflect the changes\n                tempPlayers[currentPlayerIndex].y = space.y; //Update the players array to reflect the changes\n                setPlayers(tempPlayers)\n                setCurrentPlayer({...currentPlayer, x: space.x, y: space.y}) //Update current player\n\n            }).catch(() => {\n                console.error(\"Error while moving player\")\n            })\n\n        }\n\n    }, [currentPlayer, currentPlayerIndex, gameId, players, spaces])\n\n    const getGames = useCallback(async () => {\n        await GameApi.getGames().then((value)=>{\n            setGames(value)\n        }).catch(()=>console.error(\"Error while switching player\"))\n\n    }, [currentPlayerIndex, gameId, playerCount, players])\n\n    const switchToNextPlayer = useCallback(async () => {\n        await GameApi.switchPlayer(gameId).then(()=>{\n            const newPlayerIndex = (currentPlayerIndex + 1) % playerCount\n            console.log(\"old player index\", currentPlayerIndex, \"new player index\", newPlayerIndex)\n            setCurrentPlayer(players[newPlayerIndex])\n            setCurrentPlayerIndex(newPlayerIndex)\n        }).catch(()=>console.error(\"Error while switching player\"))\n        \n    }, [currentPlayerIndex, gameId, playerCount, players])\n    const board = useMemo<Board>(() => {\n        return ({\n            spaceDtos: spaces,\n            playerDtos: players,\n            currentPlayerDto: currentPlayer,\n            currentPlayerIndex: currentPlayerIndex,\n            width: width,\n            height: height,\n            boardName: gameName,\n            boardId: gameId\n        })\n    }, [currentPlayer, currentPlayerIndex, gameId, gameName, height, players, spaces, width])\n\n    const unselectGame = useCallback(async () => {\n        setGameId(-1);\n        setLoaded(false)\n    }, [])\n\n    const selecPlayerOnspace = useCallback(async (space : Space) => {\n    if (!space.playerId) {\n    await GameApi.moveCurrentPlayer(gameId, {...space, playerId: currentPlayer.playerId}).then(() => {\n        let tempSpaces = [...spaces]\n        tempSpaces[space.x][space.y].playerId = currentPlayer.playerId\n        if (currentPlayer.x !== undefined && currentPlayer.y !== undefined) {\n            tempSpaces[currentPlayer.x][currentPlayer.y].playerId = undefined\n        }\n        setSpaces(tempSpaces)\n        let tempPlayers = [...players]\n        tempPlayers[currentPlayerIndex].x = space.x;\n        tempPlayers[currentPlayerIndex].y = space.y;\n        setPlayers(tempPlayers)\n        setCurrentPlayer({...currentPlayer, x: space.x, y: space.y})\n\n    }).catch((e) => {\n        console.error(\"error\" + e)\n    })\n    }\n    }, [currentPlayer, currentPlayerIndex, gameId, players, spaces])\n\n\n    const selectGame = useCallback(async (game : Game) => {\n        if (!game.started) {\n            GameApi.getBoard(game.id).then(board => {\n                if (board.playerDtos.length > 0) {\n                        setSpaces(board.spaceDtos)\n                        setSpaces(board.spaceDtos)\n                        setPlayers(board.playerDtos)\n                        setWidth(board.width)\n                        setHeight(board.height)\n                        setGameId(board.boardId)\n                        setGameName(board.boardName)\n                        if (board.currentPlayerDto) {\n                            setCurrentPlayer(board.currentPlayerDto)\n                            board.playerDtos.forEach((player, index) => {\n                                if(player.playerId === board.currentPlayerDto?.playerId) {\n                                    setCurrentPlayerIndex(index)\n                                }\n                            })\n                        }\n                setLoaded(true)\n                    }\n            }).catch(() => {\n            console.error(\"Error while fetching board from backend\")\n            })\n        } else {\n                console.error(\"Selected Game '\" + game.id + \"' is not started yet\")\n        }\n    }, [])\n\n\n    return (\n        <GameContext.Provider\n            value={\n                {\n                    games : games,\n                    loaded : loaded,\n                    selectGame : selectGame,\n                    board : board,\n                    setCurrentPlayerOnSpace: setPlayerOnSpace,\n                    switchCurrentPlayer : switchToNextPlayer,\n                    getGames: getGames,\n                    unselectGame: unselectGame\n                }\n            }>\n            {children} {/*See: https://reactjs.org/docs/composition-vs-inheritance.html*/}\n        </GameContext.Provider>\n    )\n\n\n\n\n}\n\nexport default GameContextProvider","/Users/Oliver/Downloads/roborally_frontend-2/src/context/GameContext.ts",[],"/Users/Oliver/Downloads/roborally_frontend-2/src/api/GameApi.ts",[],"/Users/Oliver/Downloads/roborally_frontend-2/src/components/SpaceComponent.tsx",[],"/Users/Oliver/Downloads/roborally_frontend-2/src/components/GamesComponent.tsx",["53","54"],"import {FunctionComponent, useContext, useEffect, useState} from \"react\";\nimport GameContext from \"../context/GameContext\";\nimport {GameComponent} from \"./Gamecomponent\";\nimport {Game} from \"../types/Game\";\n\n\ntype GameComponentProps = {}\n\nconst GamesComponent: FunctionComponent<GameComponentProps> = () => {\n    const {games, loaded, getGames} = useContext(GameContext)\n    useEffect(() => {\n        getGames().then(r => console.log(\"spillet hentet\"))\n    }, [])\n\n    return(\n        !loaded ?\n            <div>\n                {\n                games.map((game:Game, index : number) =>\n                <GameComponent key ={\"game\" + index} game={game}/>\n                )\n                }\n            </div>\n            :\n            <div/>\n\n    )\n}\n\nexport default GamesComponent","/Users/Oliver/Downloads/roborally_frontend-2/src/components/Gamecomponent.tsx",["55"],"import {FunctionComponent, useContext, useState} from \"react\";\nimport GameContext from \"../context/GameContext\";\nimport {Game} from \"../types/Game\";\n\n\nexport type GameComponentProps = {\n    game : Game\n}\n\nexport const GameComponent: FunctionComponent<GameComponentProps> = ({game}) => {\n    const {selectGame} = useContext(GameContext)\n\n    const onClickGame = async () => {\n        selectGame(game)\n    }\n\n    return (\n        <div onClick={onClickGame}>\n            <h1>{game.id}: {game.name}:</h1>\n            <ul>\n                {game.players.map((user, index) => <li key={game.name}> {user.playerId} {user.playerName} </li>)}\n            </ul>\n        </div>\n    )\n}\n",{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","severity":1,"message":"61","line":8,"column":9,"nodeType":"62","messageId":"63","endLine":8,"endColumn":20},{"ruleId":"60","severity":1,"message":"64","line":16,"column":12,"nodeType":"62","messageId":"63","endLine":16,"endColumn":16},{"ruleId":"65","severity":1,"message":"66","line":40,"column":8,"nodeType":"67","endLine":40,"endColumn":10,"suggestions":"68"},{"ruleId":"65","severity":1,"message":"69","line":88,"column":8,"nodeType":"67","endLine":88,"endColumn":58,"suggestions":"70"},{"ruleId":"60","severity":1,"message":"71","line":117,"column":11,"nodeType":"62","messageId":"63","endLine":117,"endColumn":29},{"ruleId":"60","severity":1,"message":"72","line":1,"column":51,"nodeType":"62","messageId":"63","endLine":1,"endColumn":59},{"ruleId":"65","severity":1,"message":"73","line":13,"column":8,"nodeType":"67","endLine":13,"endColumn":10,"suggestions":"74"},{"ruleId":"60","severity":1,"message":"72","line":1,"column":40,"nodeType":"62","messageId":"63","endLine":1,"endColumn":48},"no-native-reassign",["75"],"no-negated-in-lhs",["76"],"@typescript-eslint/no-unused-vars","'setInterval' is defined but never used.","Identifier","unusedVar","'game' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'gameId'. Either include it or remove the dependency array.","ArrayExpression",["77"],"React Hook useCallback has unnecessary dependencies: 'currentPlayerIndex', 'gameId', 'playerCount', and 'players'. Either exclude them or remove the dependency array.",["78"],"'selecPlayerOnspace' is assigned a value but never used.","'useState' is defined but never used.","React Hook useEffect has a missing dependency: 'getGames'. Either include it or remove the dependency array.",["79"],"no-global-assign","no-unsafe-negation",{"desc":"80","fix":"81"},{"desc":"82","fix":"83"},{"desc":"84","fix":"85"},"Update the dependencies array to be: [gameId]",{"range":"86","text":"87"},"Update the dependencies array to be: []",{"range":"88","text":"89"},"Update the dependencies array to be: [getGames]",{"range":"90","text":"91"},[1423,1425],"[gameId]",[4275,4325],"[]",[460,462],"[getGames]"]